import type { interfaces } from 'inversify';

import type { ClientConfig, ServerConfig } from '~/.server/configs';
import type {
  AddressValidationDtoMapper,
  ApplicantDtoMapper,
  ApplicationStatusDtoMapper,
  BenefitRenewalDtoMapper,
  ClientApplicationDtoMapper,
  ClientFriendlyStatusDtoMapper,
  CountryDtoMapper,
  DemographicSurveyDtoMapper,
  FederalGovernmentInsurancePlanDtoMapper,
  LetterDtoMapper,
  LetterTypeDtoMapper,
  MaritalStatusDtoMapper,
  PreferredCommunicationMethodDtoMapper,
  PreferredLanguageDtoMapper,
  ProvinceTerritoryStateDtoMapper,
  ProvincialGovernmentInsurancePlanDtoMapper,
} from '~/.server/domain/mappers';
import type {
  AddressValidationRepository,
  ApplicantRepository,
  ApplicationStatusRepository,
  BenefitRenewalRepository,
  ClientApplicationRepository,
  ClientFriendlyStatusRepository,
  CountryRepository,
  DemographicSurveyRepository,
  FederalGovernmentInsurancePlanRepository,
  LetterRepository,
  LetterTypeRepository,
  MaritalStatusRepository,
  PreferredCommunicationMethodRepository,
  PreferredLanguageRepository,
  ProvinceTerritoryStateRepository,
  ProvincialGovernmentInsurancePlanRepository,
} from '~/.server/domain/repositories';
import type {
  AddressValidationService,
  ApplicantService,
  ApplicationStatusService,
  AuditService,
  BenefitRenewalService,
  ClientApplicationService,
  ClientFriendlyStatusService,
  CountryService,
  DemographicSurveyService,
  FederalGovernmentInsurancePlanService,
  LetterService,
  LetterTypeService,
  MaritalStatusService,
  PreferredCommunicationMethodService,
  PreferredLanguageService,
  ProvinceTerritoryStateService,
  ProvincialGovernmentInsurancePlanService,
  RedisService,
  SessionService,
} from '~/.server/domain/services';
import type { ConfigFactory, LogFactory } from '~/.server/factories';
import type { HCaptchaDtoMapper } from '~/.server/web/mappers';
import type { HCaptchaRepository } from '~/.server/web/repositories';
import type { HCaptchaService } from '~/.server/web/services';
import type { CsrfTokenValidator } from '~/.server/web/validators';

export type ServiceIdentifier<T = unknown> = Exclude<interfaces.ServiceIdentifier<T>, string | symbol>;

export const SERVICE_IDENTIFIER = {
  ADDRESS_VALIDATION_DTO_MAPPER: serviceIdentifier<AddressValidationDtoMapper>('AddressValidationDtoMapper'),
  ADDRESS_VALIDATION_REPOSITORY: serviceIdentifier<AddressValidationRepository>('AddressValidationRepository'),
  ADDRESS_VALIDATION_SERVICE: serviceIdentifier<AddressValidationService>('AddressValidationService'),
  APPLICANT_DTO_MAPPER: serviceIdentifier<ApplicantDtoMapper>('ApplicantDtoMapper'),
  APPLICANT_REPOSITORY: serviceIdentifier<ApplicantRepository>('ApplicantRepository'),
  APPLICANT_SERVICE: serviceIdentifier<ApplicantService>('ApplicantService'),
  APPLICATION_STATUS_DTO_MAPPER: serviceIdentifier<ApplicationStatusDtoMapper>('ApplicationStatusDtoMapper'),
  APPLICATION_STATUS_REPOSITORY: serviceIdentifier<ApplicationStatusRepository>('ApplicationStatusRepository'),
  APPLICATION_STATUS_SERVICE: serviceIdentifier<ApplicationStatusService>('ApplicationStatusService'),
  AUDIT_SERVICE: serviceIdentifier<AuditService>('AuditService'),
  BENEFIT_RENEWAL_DTO_MAPPER: serviceIdentifier<BenefitRenewalDtoMapper>('BenefitRenewalDtoMapper'),
  BENEFIT_RENEWAL_REPOSITORY: serviceIdentifier<BenefitRenewalRepository>('BenefitRenewalRepository'),
  BENEFIT_RENEWAL_SERVICE: serviceIdentifier<BenefitRenewalService>('BenefitRenewalService'),
  CLIENT_APPLICATION_DTO_MAPPER: serviceIdentifier<ClientApplicationDtoMapper>('ClientApplicationDtoMapper'),
  CLIENT_APPLICATION_REPOSITORY: serviceIdentifier<ClientApplicationRepository>('ClientApplicationRepository'),
  CLIENT_APPLICATION_SERVICE: serviceIdentifier<ClientApplicationService>('ClientApplicationService'),
  CLIENT_CONFIG: serviceIdentifier<ClientConfig>('ClientConfig'),
  CLIENT_FRIENDLY_STATUS_DTO_MAPPER: serviceIdentifier<ClientFriendlyStatusDtoMapper>('ClientFriendlyStatusDtoMapper'),
  CLIENT_FRIENDLY_STATUS_REPOSITORY: serviceIdentifier<ClientFriendlyStatusRepository>('ClientFriendlyStatusRepository'),
  CLIENT_FRIENDLY_STATUS_SERVICE: serviceIdentifier<ClientFriendlyStatusService>('ClientFriendlyStatusService'),
  CONFIG_FACTORY: serviceIdentifier<ConfigFactory>('ConfigFactory'),
  COUNTRY_DTO_MAPPER: serviceIdentifier<CountryDtoMapper>('CountryDtoMapper'),
  COUNTRY_REPOSITORY: serviceIdentifier<CountryRepository>('CountryRepository'),
  COUNTRY_SERVICE: serviceIdentifier<CountryService>('CountryService'),
  DEMOGRAPHIC_SURVEY_DTO_MAPPER: serviceIdentifier<DemographicSurveyDtoMapper>('DemographicSurveyDtoMapper'),
  DEMOGRAPHIC_SURVEY_REPOSITORY: serviceIdentifier<DemographicSurveyRepository>('DemographicSurveyRepository'),
  DEMOGRAPHIC_SURVEY_SERVICE: serviceIdentifier<DemographicSurveyService>('DemographicSurveyService'),
  FEDERAL_GOVERNMENT_INSURANCE_PLAN_DTO_MAPPER: serviceIdentifier<FederalGovernmentInsurancePlanDtoMapper>('FederalGovernmentInsurancePlanDtoMapper'),
  FEDERAL_GOVERNMENT_INSURANCE_PLAN_REPOSITORY: serviceIdentifier<FederalGovernmentInsurancePlanRepository>('FederalGovernmentInsurancePlanRepository'),
  FEDERAL_GOVERNMENT_INSURANCE_PLAN_SERVICE: serviceIdentifier<FederalGovernmentInsurancePlanService>('FederalGovernmentInsurancePlanService'),
  HCAPTCHA_DTO_MAPPER: serviceIdentifier<HCaptchaDtoMapper>('HCaptchaDtoMapper'),
  HCAPTCHA_REPOSITORY: serviceIdentifier<HCaptchaRepository>('HCaptchaRepository'),
  HCAPTCHA_SERVICE: serviceIdentifier<HCaptchaService>('HCaptchaService'),
  LETTER_DTO_MAPPER: serviceIdentifier<LetterDtoMapper>('LetterDtoMapper'),
  LETTER_REPOSITORY: serviceIdentifier<LetterRepository>('LetterRepository'),
  LETTER_SERVICE: serviceIdentifier<LetterService>('LetterService'),
  LETTER_TYPE_DTO_MAPPER: serviceIdentifier<LetterTypeDtoMapper>('LetterTypeDtoMapper'),
  LETTER_TYPE_REPOSITORY: serviceIdentifier<LetterTypeRepository>('LetterTypeRepository'),
  LETTER_TYPE_SERVICE: serviceIdentifier<LetterTypeService>('LetterTypeService'),
  LOG_FACTORY: serviceIdentifier<LogFactory>('LogFactory'),
  MARITAL_STATUS_DTO_MAPPER: serviceIdentifier<MaritalStatusDtoMapper>('MaritalStatusDtoMapper'),
  MARITAL_STATUS_REPOSITORY: serviceIdentifier<MaritalStatusRepository>('MaritalStatusRepository'),
  MARITAL_STATUS_SERVICE: serviceIdentifier<MaritalStatusService>('MaritalStatusService'),
  PREFERRED_COMMUNICATION_METHOD_DTO_MAPPER: serviceIdentifier<PreferredCommunicationMethodDtoMapper>('PreferredCommunicationMethodDtoMapper'),
  PREFERRED_COMMUNICATION_METHOD_REPOSITORY: serviceIdentifier<PreferredCommunicationMethodRepository>('PreferredCommunicationMethodRepository'),
  PREFERRED_COMMUNICATION_METHOD_SERVICE: serviceIdentifier<PreferredCommunicationMethodService>('PreferredCommunicationMethodService'),
  PREFERRED_LANGUAGE_DTO_MAPPER: serviceIdentifier<PreferredLanguageDtoMapper>('PreferredLanguageDtoMapper'),
  PREFERRED_LANGUAGE_REPOSITORY: serviceIdentifier<PreferredLanguageRepository>('PreferredLanguageRepository'),
  PREFERRED_LANGUAGE_SERVICE: serviceIdentifier<PreferredLanguageService>('PreferredLanguageService'),
  PROVINCE_TERRITORY_STATE_DTO_MAPPER: serviceIdentifier<ProvinceTerritoryStateDtoMapper>('ProvinceTerritoryStateDtoMapper'),
  PROVINCE_TERRITORY_STATE_REPOSITORY: serviceIdentifier<ProvinceTerritoryStateRepository>('ProvinceTerritoryStateRepository'),
  PROVINCE_TERRITORY_STATE_SERVICE: serviceIdentifier<ProvinceTerritoryStateService>('ProvinceTerritoryStateService'),
  PROVINCIAL_GOVERNMENT_INSURANCE_PLAN_DTO_MAPPER: serviceIdentifier<ProvincialGovernmentInsurancePlanDtoMapper>('ProvincialGovernmentInsurancePlanDtoMapper'),
  PROVINCIAL_GOVERNMENT_INSURANCE_PLAN_REPOSITORY: serviceIdentifier<ProvincialGovernmentInsurancePlanRepository>('ProvincialGovernmentInsurancePlanRepository'),
  PROVINCIAL_GOVERNMENT_INSURANCE_PLAN_SERVICE: serviceIdentifier<ProvincialGovernmentInsurancePlanService>('ProvincialGovernmentInsurancePlanService'),
  REDIS_SERVICE: serviceIdentifier<RedisService>('RedisService'),
  SERVER_CONFIG: serviceIdentifier<ServerConfig>('ServerConfig'),
  SESSION_SERVICE: serviceIdentifier<SessionService>('SessionService'),
  WEB_CSRF_TOKEN_VALIDATOR: serviceIdentifier<CsrfTokenValidator>('WebCsrfTokenValidator'),
} as const satisfies Record<string, ServiceIdentifier>;

function serviceIdentifier<T>(identifier: string): ServiceIdentifier<T> {
  return Symbol.for(identifier) as unknown as ServiceIdentifier<T>;
}
