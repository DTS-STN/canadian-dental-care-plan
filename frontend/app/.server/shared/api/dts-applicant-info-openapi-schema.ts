/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/applicant': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Personal Information
     * @description Get Applicant information from PowerPlatform
     */
    post: operations['GetApplicantInformation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/benefit-application': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Submit Application
     * @description Submit a benefit application to PowerPlatform
     */
    post: operations['SubmitApplication'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/retrieve-benefit-application': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retrieve Application
     * @description Retrieve a benefit application from PowerPlatform
     */
    post: operations['RetrieveApplication'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/retrieve-benefit-application-config-dates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GetApplicationConfigDates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description An application for a program benefit. */
    BenefitApplication: components['schemas']['BenefitApplicationType'];
    /** @description A benefit application year contains detail about a business year like period application, taxation year, coverage period. */
    BenefitApplicationYear: components['schemas']['BenefitApplicationYearType'];
    /** @description InsurancePlan describes an insurance offering comprised of a list of covered benefits, costs associated with those benefits (i.e. the plan), and additional information about the offering, such as who it is owned and administered by, a coverage area, contact information, etc. */
    InsurancePlan: components['schemas']['InsurancePlanType'];
    /** @description A data type for a benefit application year */
    BenefitApplicationYearType: {
      BenefitApplicationYearIdentification?: components['schemas']['BenefitApplicationYearIdentification'][];
      BenefitApplicationYearEffectivePeriod?: components['schemas']['DatePeriodType'];
      BenefitApplicationYearTaxYear?: components['schemas']['DateType'];
      BenefitApplicationYearIntakePeriod?: components['schemas']['DatePeriodType'];
      BenefitApplicationYearRenewalPeriod?: components['schemas']['DatePeriodType'];
      BenefitApplicationYearNext?: components['schemas']['BenefitApplicationYearNextType'];
      BenefitApplicationYearCoveragePeriod?: components['schemas']['DatePeriodType'];
    };
    DatePeriodType: {
      StartDate?: components['schemas']['DateType'];
      EndDate?: components['schemas']['DateType'];
    };
    BenefitApplicationYearNextType: {
      BenefitApplicationYearIdentification?: components['schemas']['BenefitApplicationYearIdentification'];
    };
    /** @description A data type for insurance plan */
    InsurancePlanType: {
      InsurancePlanIdentification?: components['schemas']['InsurancePlanIdentification'][];
    };
    /** @description The applicant for the benefit. */
    Applicant: components['schemas']['ClientType'];
    /** @description The detail of the applicant. */
    ApplicantDetail: components['schemas']['ApplicantDetailType'];
    /** @description An identifier to attest that the primary applicant is the parent or legal guardian of the dependent. */
    AttestParentOrGuardianIndicator: boolean;
    /** @description An identifier that the applicant does have the Disability Tax Credit. */
    DisabilityTaxCreditIndicator: boolean;
    /** @description An identifier that the applicant is 16 or 17 and lives independently from his parents or legal guardian. */
    LivingIndependentlyIndicator: boolean;
    /** @description A type of applicant. IE : Primary, Spouse, Dependant */
    ApplicantCategoryCode: components['schemas']['ReferenceDataCodeType'];
    /** @description Indicates that mailing address is the same as home address */
    MailingSameAsHomeIndicator: boolean;
    /** @description A code for the preferred method of communication */
    PreferredMethodCommunicationCode: components['schemas']['ReferenceDataCodeMandatoryIDType'];
    /** @description Indicates that the application has a private dental insurance plan */
    PrivateDentalInsuranceIndicator: boolean;
    /** @description Indicates that the application has federal dental coverage */
    FederalDentalCoverageIndicator: boolean;
    /** @description A type of the benefit application. */
    BenefitApplicationCategoryCode: components['schemas']['ReferenceDataCodeType'];
    /** @description A code of the channel (online, paper) for the benefit application. */
    BenefitApplicationChannelCode: components['schemas']['ReferenceDataCodeMandatoryIDType'];
    /** @description An identification for the benefit application. */
    BenefitApplicationIdentification: components['schemas']['IdentificationType'];
    /** @description An identification for an application year */
    BenefitApplicationYearIdentification: components['schemas']['IdentificationType'];
    /** @description An identification for an insurance plan */
    InsurancePlanIdentification: components['schemas']['IdentificationType'];
    /** @description Represents a codeable concept used by a property of a resource. It defines the value, name and origin for this code. */
    ReferenceDataCodeType: {
      ReferenceDataID?: components['schemas']['ReferenceDataID'];
      ReferenceDataName?: components['schemas']['ReferenceDataName'];
    };
    /** @description Copied from ReferenceDataCodeType */
    ReferenceDataCodeMandatoryIDAndNameType: {
      ReferenceDataID: components['schemas']['ReferenceDataID'];
      ReferenceDataName: components['schemas']['ReferenceDataName'];
    };
    /** @description Copied from ReferenceDataCodeType */
    ReferenceDataCodeMandatoryIDType: {
      ReferenceDataID: components['schemas']['ReferenceDataID'];
    };
    /** @description Copied from ReferenceDataCodeType */
    ReferenceDataCodeMandatoryNameType: {
      ReferenceDataName: components['schemas']['ReferenceDataName'];
    };
    /** @description A data type for a country, territory, dependency, or other such geopolitical subdivision of a location. */
    CountryType: {
      CountryCode: components['schemas']['CountryCode'];
    };
    DateType: {
      /** Format: date */
      date?: string;
      /** Format: date-time */
      dateTime?: string;
      DayDate?: string;
      MonthDate?: string;
      YearDate?: string;
    };
    /** @description A data type for a representation of an identity. */
    IdentificationType: {
      IdentificationID: components['schemas']['IdentificationID'];
      IdentificationCategoryText?: components['schemas']['IdentificationCategoryText'];
    };
    /** @description A data type for a province of a country. */
    ProvinceType: {
      ProvinceCode?: components['schemas']['ProvinceCode'];
      ProvinceName?: components['schemas']['ProvinceName'];
    };
    /** @description A data type for a state of something or someone. */
    PersonStatusType: {
      StatusCode: components['schemas']['PersonStatusCode'];
    };
    /** @description A code for a status or condition of something or someone. */
    PersonStatusCode: components['schemas']['ReferenceDataCodeMandatoryIDType'];
    /** @description An identification for a client. */
    ClientIdentification: components['schemas']['IdentificationType'];
    /** @description A date a person was born. */
    PersonBirthDate: components['schemas']['DateType'];
    /** @description A means of contacting a person. */
    PersonContactInformation: components['schemas']['ContactInformationType'];
    /** @description A language capability of a person. */
    PersonLanguage: components['schemas']['PersonLanguageType'];
    /** @description The current legal marital status for the client. */
    PersonMaritalStatus: components['schemas']['PersonStatusType'];
    /** @description A combination of names and/or titles by which a person is known. */
    PersonName: components['schemas']['PersonNameType'];
    /** @description A Social Insurance Number assigned by the Government of Canada. */
    PersonSINIdentification: components['schemas']['IdentificationType'];
    /** @description A data type for a person language. */
    PersonLanguageType: {
      CommunicationCategoryCode: components['schemas']['PersonCommunicationCategoryCode'];
      PreferredIndicator: components['schemas']['PreferredIndicator'];
    };
    /** @description A code of human communication, ie: spoken, written. */
    PersonCommunicationCategoryCode: components['schemas']['ReferenceDataCodeMandatoryIDType'];
    /** @description Information about a person related to a client. */
    RelatedPerson: components['schemas']['RelatedPersonType'];
    /** @description A code or identifier defined for a reference data set. */
    ReferenceDataID: string;
    /** @description A name or description of a code or identifier. */
    ReferenceDataName: string;
    /** @description A country, territory, dependency, or other such geopolitical subdivision of a location. */
    CountryCode: components['schemas']['ReferenceDataCodeMandatoryIDType'];
    /** @description An identifier. */
    IdentificationID: string;
    /** @description A kind of identification. */
    IdentificationCategoryText: string;
    /** @description A code for a province of a country. */
    ProvinceCode: components['schemas']['ReferenceDataCodeType'];
    /** @description A name of a province of a country. */
    ProvinceName: string;
    /** @description A code of the language. */
    LanguageCode: components['schemas']['ReferenceDataCodeType'];
    /** @description An indicator marking this class as preferred. */
    PreferredIndicator: boolean;
    /** @description A data type for a combination of names and/or titles by which a person is known. */
    PersonNameType: {
      PersonGivenName?: components['schemas']['PersonGivenName'][];
      PersonSurName?: components['schemas']['PersonSurName'];
    };
    /** @description A reference data represents a value (code) defined for a reference data set (code list). */
    ReferenceDataType: {
      ReferenceDataID?: components['schemas']['ReferenceDataID'];
      ReferenceDataName?: components['schemas']['ReferenceDataName'];
    };
    /** @description A set of location information, often described by postal information. */
    Address: components['schemas']['AddressType'];
    /** @description A type of the contact information. IE: Mailing, Home. */
    ContactInformationCategoryCode: components['schemas']['ReferenceDataCodeType'];
    /** @description An email address identifies an email box to which messages are delivered. */
    EmailAddress: components['schemas']['EmailAddressType'];
    /** @description A telephone number for a telecommunication device by which a person or organization may be contacted. */
    TelephoneNumber: components['schemas']['TelephoneNumberType'];
    /** @description A first name of a person. */
    PersonGivenName: string;
    /** @description A last name or family name of a person. */
    PersonSurName: string;
    /** @description A code for the relationship between two persons. */
    PersonRelationshipCode: {
      ReferenceDataName: components['schemas']['ReferenceDataName'];
    };
    /** @description A data type for a geophysical location described by postal information. */
    AddressType: {
      AddressCategoryCode: components['schemas']['AddressCategoryCode'];
      AddressCityName: components['schemas']['AddressCityName'];
      AddressCountry: components['schemas']['AddressCountry'];
      AddressPostalCode?: components['schemas']['AddressPostalCode'];
      AddressProvince?: components['schemas']['AddressProvince'];
      AddressSecondaryUnitText?: components['schemas']['AddressSecondaryUnitText'];
      AddressStreet: components['schemas']['AddressStreet'];
    };
    /** @description A data type for a telephone number for a telecommunication device. */
    TelephoneNumberType: {
      FullTelephoneNumber?: components['schemas']['FullTelephoneNumber'];
      TelephoneNumberCategoryCode: components['schemas']['TelephoneNumberCategoryCode'];
    };
    /** @description A data type for an email address identifies an email box to which messages are delivered. */
    EmailAddressType: {
      EmailAddressID?: components['schemas']['EmailAddressID'];
    };
    /** @description A kind of address. */
    AddressCategoryCode: components['schemas']['ReferenceDataCodeMandatoryNameType'];
    /** @description A name of a city or town. */
    AddressCityName: string;
    /** @description A country, territory, dependency, or other such geopolitical subdivision of a location. */
    AddressCountry: components['schemas']['CountryType'];
    /** @description An identifier of a post office-assigned zone for an address. */
    AddressPostalCode: string;
    /** @description A province of a country. */
    AddressProvince: components['schemas']['ProvinceType'];
    /** @description A particular unit within a larger unit or grouping at a location. */
    AddressSecondaryUnitText: string;
    /** @description A road, thoroughfare or highway. */
    AddressStreet: components['schemas']['StreetType'];
    /** @description A full telephone number. */
    FullTelephoneNumber: components['schemas']['FullTelephoneNumberType'];
    /** @description A kind of telephone number. */
    TelephoneNumberCategoryCode: components['schemas']['ReferenceDataCodeMandatoryIDAndNameType'];
    /** @description An unique identifier for an email box. */
    EmailAddressID: string;
    /** @description A data type for a road, thoroughfare, or highway. */
    StreetType: {
      StreetName: components['schemas']['StreetName'];
    };
    /** @description A data type for a full telephone number. */
    FullTelephoneNumberType: {
      TelephoneNumberFullID?: components['schemas']['TelephoneNumberFullID'];
    };
    /** @description A name of a street. */
    StreetName: string;
    /** @description A complete telephone number. */
    TelephoneNumberFullID: string;
    /** @description A data type for how to contact a person or an organization. */
    ContactInformationType: {
      Address?: components['schemas']['Address'][];
      ContactInformationCategoryCode?: components['schemas']['ContactInformationCategoryCode'];
      EmailAddress?: components['schemas']['EmailAddress'][];
      TelephoneNumber?: components['schemas']['TelephoneNumber'][];
    };
    /** @description Applicant with SIN Only */
    ApplicantWithSinOnly: {
      PersonSINIdentification: components['schemas']['PersonSINIdentification'];
    };
    /** @description A resource for information about the success/failure of a restful operation. */
    OperationOutcome: components['schemas']['OperationOutcomeType'];
    /** @description A data type for information about the success/failure of a restful operation */
    OperationOutcomeType: components['schemas']['ResourceType'] & {
      Issue?: components['schemas']['Issue'][];
      OperationOutcomeDate?: components['schemas']['OperationOutcomeDate'];
      OperationOutcomeStatus?: components['schemas']['OperationOutcomeStatus'];
    };
    /** @description A data type for a resource. */
    ResourceType: {
      ResourceID?: components['schemas']['ResourceID'];
      ResourceLanguage?: components['schemas']['ResourceLanguage'];
      ResourceMeta?: components['schemas']['ResourceMeta'];
      ResourceReference?: components['schemas']['ResourceReference'];
    };
    /** @description A single issue associated with the operation. */
    Issue: components['schemas']['IssueType'];
    /** @description An identifier for the resource. */
    ResourceID: string;
    /** @description Language of the resource content. */
    ResourceLanguage: components['schemas']['LanguageType'];
    /** @description A set of metadata that provides technical and workflow context to the resource. The metadata items are all optional, though some or all of them may be required in particular implementations or contexts of use. */
    ResourceMeta: components['schemas']['ResourceMetaType'];
    /** @description Literal reference, Relative, internal or absolute URL. */
    ResourceReference: string;
    /** @description A data type for an issue associated with the operation. */
    IssueType: {
      IssueAdditionalInformation?: components['schemas']['IssueAdditionalInformation'];
      IssueCode?: components['schemas']['IssueCode'];
      IssueDate?: components['schemas']['IssueDate'];
      IssueDetails?: components['schemas']['IssueDetails'];
      IssueReferenceExpression?: components['schemas']['IssueReferenceExpression'][];
      IssueSeverityCode?: components['schemas']['IssueSeverityCode'];
    };
    /** @description A data type for a set of metadata that provides technical and workflow context to the resource. The metadata items are all optional, though some or all of them may be required in particular implementations or contexts of use. */
    ResourceMetaType: {
      LastUpdatedDate?: components['schemas']['LastUpdatedDate'];
      SecurityAttribute?: components['schemas']['SecurityAttribute'][];
      SourceCode?: components['schemas']['SourceCode'];
      VersionID?: components['schemas']['VersionID'];
    };
    /** @description Additional Information for the issue. */
    IssueAdditionalInformation: string;
    /** @description The details about the issue. */
    IssueDetails: string;
    /** @description A reference to the properties related to the issue. IE : jsonpath, xpath,regex. */
    IssueReferenceExpression: string;
    /** @description An abstraction representing the basic properties or characteristics of an entity with respect to safeguarding information. */
    SecurityAttribute: components['schemas']['SecurityAttributeType'];
    /** @description The version of the resource content. Can be used to ensure that updates are based on the latest version of the resource. */
    VersionID: string;
    /** @description An abstraction representing the basic properties or characteristics of an entity with respect to safeguarding information. */
    SecurityAttributeType: {
      DataElementReference?: components['schemas']['DataElementReference'][];
      SecurityCode?: components['schemas']['SecurityCode'][];
      SecurityLabel?: components['schemas']['SecurityLabel'][];
    };
    /** @description A reference to a data element within the resource. IE: xpath, jsonpath. */
    DataElementReference: string;
    /** @description A security label applicable to this security attribute. */
    SecurityLabel: string;
    /** @description The date the issue occurred. */
    IssueDate: components['schemas']['DateType'];
    /** @description The date the resource content was last updated. */
    LastUpdatedDate: components['schemas']['DateType'];
    /** @description The date of the operation outcome. */
    OperationOutcomeDate: components['schemas']['DateType'];
    /** @description A data type for a language. */
    LanguageType: {
      CommunicationCategoryCode?: components['schemas']['CommunicationCategoryCode'];
      LanguageCode?: components['schemas']['LanguageCode'];
      PreferredIndicator?: components['schemas']['PreferredIndicator'];
    };
    /** @description A code for name, identifier, or reference of a resource from which the information was taken. */
    SourceCode: components['schemas']['ReferenceDataType'];
    /** @description A security code applicable to this security attribute. */
    SecurityCode: components['schemas']['ReferenceDataCodeType'];
    /** @description A code of human communication, ie: spoken, written. */
    CommunicationCategoryCode: components['schemas']['ReferenceDataCodeType'];
    /** @description An error or warning code of the issue. */
    IssueCode: components['schemas']['ReferenceDataCodeType'];
    /** @description A code for the severity of the issue : fatal | error | warning | information. */
    IssueSeverityCode: components['schemas']['ReferenceDataCodeType'];
    /** @description A status for the operation outcome. */
    OperationOutcomeStatus: components['schemas']['StatusType'];
    /** @description A data type for a state of something or someone. */
    StatusType: {
      StatusCode?: components['schemas']['StatusCode'];
    };
    /** @description A code for a status or condition of something or someone. */
    StatusCode: components['schemas']['ReferenceDataCodeType'];
    /** @description Personal information request */
    applicantRequest: {
      /** @example  */
      Applicant: components['schemas']['ApplicantWithSinOnly'];
    };
    /** @description Personal information response */
    applicantResponse: {
      /** @example  */
      BenefitApplication: components['schemas']['BenefitApplication'];
    };
    /** @description Benefit application request */
    benefitApplicationRequest: {
      BenefitApplication: components['schemas']['BenefitApplication'];
    };
    /**
     * @description Benefit application response
     * @example {
     *       "BenefitApplication": {
     *         "BenefitApplicationIdentification": [
     *           {
     *             "IdentificationID": "xxxx",
     *             "IdentificationCategoryText": "Confirmation Number"
     *           }
     *         ]
     *       }
     *     }
     */
    benefitApplicationResponse: {
      /** @example  */
      BenefitApplication: components['schemas']['BenefitApplication'];
    };
    /** @description Retrieve benefit application config dates response */
    retrieveBenefitApplicationConfigDatesResponse: {
      BenefitApplicationYear?: components['schemas']['BenefitApplicationYearType'][];
    };
    /** @description A data type for the client resource. */
    ClientType: {
      ApplicantCategoryCode?: components['schemas']['ApplicantCategoryCode'];
      ApplicantDetail: components['schemas']['ApplicantDetail'];
      ClientIdentification?: components['schemas']['ClientIdentification'][];
      PersonBirthDate: components['schemas']['PersonBirthDate'];
      PersonContactInformation: components['schemas']['PersonContactInformation'][];
      PersonLanguage: components['schemas']['PersonLanguage'][];
      PersonMaritalStatus: components['schemas']['PersonMaritalStatus'];
      PersonName?: components['schemas']['PersonName'][];
      PersonSINIdentification: components['schemas']['PersonSINIdentification'];
      RelatedPerson?: components['schemas']['RelatedPerson'][];
      MailingSameAsHomeIndicator: components['schemas']['MailingSameAsHomeIndicator'];
      PreferredMethodCommunicationCode: components['schemas']['PreferredMethodCommunicationCode'];
      BenefitApplicationDetail?: components['schemas']['BenefitApplicationDetailIdentification'][];
    };
    /** @description A data type for information about a person related to a client. */
    RelatedPersonType: {
      ApplicantDetail: components['schemas']['ApplicantDetail'];
      PersonBirthDate: components['schemas']['PersonBirthDate'];
      PersonName?: components['schemas']['PersonName'][];
      PersonRelationshipCode: components['schemas']['PersonRelationshipCode'];
      PersonSINIdentification?: components['schemas']['PersonSINIdentification'];
      ClientIdentification?: components['schemas']['ClientIdentification'][];
      BenefitApplicationDetail?: components['schemas']['BenefitApplicationDetailIdentification'][];
    };
    /** @description A data type for an application for a program benefit. */
    BenefitApplicationType: {
      Applicant: components['schemas']['Applicant'];
      BenefitApplicationCategoryCode: components['schemas']['BenefitApplicationCategoryCode'];
      BenefitApplicationChannelCode: components['schemas']['BenefitApplicationChannelCode'];
      BenefitApplicationIdentification?: components['schemas']['BenefitApplicationIdentification'][];
      BenefitApplicationYear?: components['schemas']['BenefitApplicationYear'];
    };
    /** @description A data type for the detail of the applicant. */
    ApplicantDetailType: {
      AttestParentOrGuardianIndicator?: components['schemas']['AttestParentOrGuardianIndicator'];
      ConsentToSharePersonalInformationIndicator?: components['schemas']['ConsentToSharePersonalInformationIndicator'];
      DisabilityTaxCreditIndicator?: components['schemas']['DisabilityTaxCreditIndicator'];
      FederalDentalCoverageIndicator?: components['schemas']['FederalDentalCoverageIndicator'];
      LivingIndependentlyIndicator?: components['schemas']['LivingIndependentlyIndicator'];
      PrivateDentalInsuranceIndicator?: components['schemas']['PrivateDentalInsuranceIndicator'];
      ProvincialDentalCoverageIndicator?: components['schemas']['ProvincialDentalCoverageIndicator'];
      PreviousTaxesFiledIndicator?: components['schemas']['PreviousTaxesFiledIndicator'];
      PreviousApplicationIndicator?: components['schemas']['PreviousApplicationIndicator'];
      InvitationToApplyIndicator?: components['schemas']['InvitationToApplyIndicator'];
      RequiresMaritalInformationIndicator?: components['schemas']['RequiresMaritalInformationIndicator'];
      MaritalStatusChangedIndicator?: components['schemas']['MaritalStatusChangedIndicator'];
      AddressChangedIndicator?: components['schemas']['AddressChangedIndicator'];
      PhoneChangedIndicator?: components['schemas']['PhoneChangedIndicator'];
      EmailChangedIndicator?: components['schemas']['EmailChangedIndicator'];
      PublicInsuranceChangedIndicator?: components['schemas']['PublicInsuranceChangedIndicator'];
      InsurancePlan?: components['schemas']['InsurancePlan'][];
    };
    /** @description An identifier that the primary applicant attests that their spouse has consented to share their information. */
    ConsentToSharePersonalInformationIndicator: boolean;
    /** @description Indicates that the application has provincial dental coverage */
    ProvincialDentalCoverageIndicator: boolean;
    /** @description Retrieve client application request */
    retrieveApplicationRequest: {
      /** @example  */
      Applicant: components['schemas']['ApplicantByMultipleChoice'];
      BenefitApplicationYear?: components['schemas']['BenefitApplicationYearIdentification'];
    };
    /** @description Retrieve client application request */
    retrieveApplicationResponse: {
      /** @description Benefit application */
      BenefitApplication?: components['schemas']['BenefitApplication'];
    };
    /** @description Applicant specified by multiple choices */
    ApplicantByMultipleChoice: {
      PersonSINIdentification?: components['schemas']['PersonSINIdentification'];
      PersonName?: components['schemas']['PersonNameType'];
      PersonBirthDate?: components['schemas']['PersonBirthDate'];
      ClientIdentification?: components['schemas']['ClientIdentification'][];
    };
    /** @description An indicator that the applicant has previously applied for this benefit. */
    PreviousApplicationIndicator: boolean;
    /** @description An indicator that the applicant and partner have previously filed their taxes. */
    PreviousTaxesFiledIndicator: boolean;
    /** @description An indicator that the applicant received an invitation to apply for benefits. */
    InvitationToApplyIndicator: boolean;
    /** @description An indicator that the applicant requires marital information. */
    RequiresMaritalInformationIndicator: boolean;
    /** @description An indicator that the applicant's marital status has changed. */
    MaritalStatusChangedIndicator: boolean;
    /** @description An indicator that the applicant's home and mailing address has changed. */
    AddressChangedIndicator: boolean;
    /** @description An indicator that the applicant's phone number has changed. */
    PhoneChangedIndicator: boolean;
    /** @description An indicator that the applicant's email address has changed. */
    EmailChangedIndicator: boolean;
    /** @description An indicator that the applicant's insurance coverage has changed. */
    PublicInsuranceChangedIndicator: boolean;
    /** @description Benefit Application Detail identifier and value */
    BenefitApplicationDetailIdentification: {
      BenefitApplicationDetailID: string;
      BenefitApplicationDetailValue?: string;
      BenefitApplicationDetailValues?: string[];
      BenefitApplicationDetailIndicator?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  GetApplicantInformation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Applicant identifier */
    requestBody: {
      content: {
        'application/json': components['schemas']['applicantRequest'];
      };
    };
    responses: {
      /** @description Successful query */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['applicantResponse'];
        };
      };
      /** @description Applicant not found */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request failure */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
    };
  };
  SubmitApplication: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Applicant application information */
    requestBody: {
      content: {
        'application/json': components['schemas']['benefitApplicationRequest'];
      };
    };
    responses: {
      /** @description Successful application confirmation number */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['benefitApplicationResponse'];
        };
      };
      /** @description Bad request failure */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
    };
  };
  RetrieveApplication: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application identifier */
    requestBody: {
      content: {
        'application/json': components['schemas']['retrieveApplicationRequest'];
      };
    };
    responses: {
      /** @description Successful query */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['retrieveApplicationResponse'];
        };
      };
      /** @description Application not found */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request failure */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
    };
  };
  GetApplicationConfigDates: {
    parameters: {
      query: {
        /** @description The date to use to request application date configuration information */
        date: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful query */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['retrieveBenefitApplicationConfigDatesResponse'];
        };
      };
      /** @description Bad request failure */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OperationOutcome'];
        };
      };
    };
  };
}
